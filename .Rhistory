if(sampling_strat == "up") {
d <- caret::upSample(x = d[,-ncol(d)],
y = factor(d$y))
} else {
d <- caret::downSample(x = d[,-ncol(d)],
y = factor(d$y))
}
pos <- d$x
}
model_data[[i]] <- list(
x = x_val[pos],
y = y_val[pos,],
sequences = sequences[pos],
input = input[pos,]
)
}
names(model_data) <- sets
model_data <- c(model_data,tokenizer_data)
return(model_data)
}
model_data <- make_model_data(data = data,
x = "text",
y = "numeric_label",
n_classes = 27,
sets = c("train","test","valid"),
probs = c(0.5,0.3,0.2),
sampling_strat = "up")
model_data$num_words
## word2vec embedding ----------------------------------------------------------
skipgrams_generator <- function(text, tokenizer, window_size, negative_samples) {
gen <- texts_to_sequences_generator(tokenizer, sample(text))
function() {
skip <- generator_next(gen) %>%
skipgrams(
vocabulary_size = tokenizer$num_words,
window_size = window_size,
negative_samples = 1
)
x <- transpose(skip$couples) %>% purrr::map(. %>% unlist %>% as.matrix(ncol = 1))
y <- skip$labels %>% as.matrix(ncol = 1)
list(x, y)
}
}
# making architecture
input_target <- layer_input(shape = 1)
input_context <- layer_input(shape = 1)
embedding <- layer_embedding(
input_dim = model_data$tokenizer$num_words + 1,
output_dim = 200,
input_length = 1,
name = "embedding"
)
target_vector <- input_target %>%
embedding() %>%
layer_flatten()
context_vector <- input_context %>%
embedding() %>%
layer_flatten()
dot_product <- layer_dot(list(target_vector, context_vector), axes = 1)
output <- layer_dense(dot_product, units = 1, activation = "sigmoid")
model <- keras_model(list(input_target, input_context), output)
model %>% compile(loss = "binary_crossentropy", optimizer = "adam")
# fit model
model %>%
keras::fit(
skipgrams_generator(as.vector(data$text), model_data$tokenizer, 3, 2),
steps_per_epoch = 1000, epochs = 5
)
# get embedding weights
word2vec_embedding <- keras::get_weights(model)[[1]]
rownames(word2vec_embedding) <- c('NA',as.vector(unlist(model_data$tokenizer$index_word)))
# check embedding
cos_sim <- function(token, n_matches) {
embedding_vector <- t(matrix(word2vec_embedding[token,]))
cos_sim = sim2(x = word2vec_embedding, y = embedding_vector, method = "cosine", norm = "l2")
print(head(sort(cos_sim[,1], decreasing = TRUE), n_matches))
}
cos_sim("auÃŸen",10)
cos_sim("eu",10)
cos_sim("familie",10)
cos_sim("famil",10)
cos_sim("fami",10)
cos_sim("bildung",10)
rm(context_vector,dot_product,input_context,input_target,output,target_vector,
embedding,model,skipgrams_generator)
gc()
saveRDS(word2vec_embedding, "word2vec_embedding_agglabel.rds")
#word2vec_embedding <- readRDS("word2vec_embedding_agglabel.rds")
m <- keras::keras_model_sequential() %>%
keras::layer_embedding(input_dim = model_data$num_words + 1,
output_dim = ncol(word2vec_embedding),
input_length = model_data$max_length,
mask_zero = TRUE,
weights = list(word2vec_embedding),
trainable = FALSE) %>%
keras::layer_conv_1d(filters = 300, kernel_size = 10, activation = 'relu') %>%
keras::layer_max_pooling_1d(pool_size = 5) %>%
keras::layer_conv_1d(filters = 300, kernel_size = 10, activation = 'relu') %>%
keras::layer_global_max_pooling_1d() %>%
keras::layer_dense(units = 27, activation = "softmax")
#word2vec_embedding <- readRDS("word2vec_embedding_agglabel.rds")
m <- keras::keras_model_sequential() %>%
keras::layer_embedding(input_dim = model_data$num_words + 1,
output_dim = ncol(word2vec_embedding),
input_length = model_data$max_length,
mask_zero = TRUE,
weights = list(word2vec_embedding),
trainable = FALSE) %>%
keras::layer_conv_1d(filters = 200, kernel_size = 10, activation = 'relu') %>%
keras::layer_max_pooling_1d(pool_size = 5) %>%
keras::layer_conv_1d(filters = 200, kernel_size = 10, activation = 'relu') %>%
keras::layer_global_max_pooling_1d() %>%
keras::layer_dense(units = 27, activation = "softmax")
ncol(word2vec_embedding)
model_data$max_length
#word2vec_embedding <- readRDS("word2vec_embedding_agglabel.rds")
m <- keras::keras_model_sequential() %>%
keras::layer_embedding(input_dim = model_data$num_words + 1,
output_dim = ncol(word2vec_embedding),
input_length = model_data$max_length,
mask_zero = TRUE,
weights = list(word2vec_embedding),
trainable = FALSE) %>%
keras::layer_conv_1d(filters = 200, kernel_size = 5, activation = 'relu') %>%
keras::layer_max_pooling_1d(pool_size = 5) %>%
keras::layer_conv_1d(filters = 200, kernel_size = 5, activation = 'relu') %>%
keras::layer_global_max_pooling_1d() %>%
keras::layer_dense(units = 27, activation = "softmax")
m %>%
keras::compile(
optimizer = "adam",
loss = "categorical_crossentropy",
metrics = c("categorical_accuracy")
)
history <- m %>%
keras::fit(
model_data$train$input,
model_data$train$y,
epochs = 5,
batch_size = 2000,
validation_data = list(model_data$valid$input, model_data$valid$y)
)
#------------------#
# model evaluation #
#------------------#
word2vec_result <- as.data.frame(predict(m, model_data$test$input))
a <- t(apply(word2vec_result,1, doBy::which.maxn,3))
View(a)
hist(a[,1])
View(a)
a <- t(apply(word2vec_result,1, doBy::which.maxn,3)) %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n())
View(a)
a <- t(apply(word2vec_result,1, doBy::which.maxn,3)) %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer()
a <- t(apply(word2vec_result,1, doBy::which.maxn,3)) %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "category")
View(a)
a <- t(apply(word2vec_result,1, doBy::which.maxn,3)) %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "category")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)))
View(a)
View(label_mapping)
get_pred <- function(results, n, label_mapping) {
data <- t(apply(word2vec_result,1, doBy::which.maxn,3)) %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
return(data)
}
word2vec_result <- get_pred(word2vec_result, 3, label_mapping)
View(word2vec_result)
model_data$test$y
apply(model_data$test$y,1, which.max)
## model evaluation ------------------------------------------------------------
get_pred <- function(data, model, n, label_mapping) {
data_pred <- as.data.frame(predict(model, data$input)) %>%
t(apply(word2vec_result,1, doBy::which.maxn,3)) %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
return(data)
}
results <- get_pred(model_data$test, m, 3, label_mapping)
## model evaluation ------------------------------------------------------------
get_pred <- function(data, model, n, label_mapping) {
data_pred <- as.data.frame(predict(model, data$input)) %>%
apply(.,1, doBy::which.maxn,3) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
return(data)
}
results <- get_pred(model_data$test, m, 3, label_mapping)
View(results)
## model evaluation ------------------------------------------------------------
get_pred <- function(data, model, n, label_mapping) {
data_pred <- as.data.frame(predict(model, data$input)) %>%
apply(.,1, doBy::which.maxn,3) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
return(data_pred)
}
results <- get_pred(model_data$test, m, 3, label_mapping)
View(results)
View(results)
## model evaluation ------------------------------------------------------------
get_pred <- function(data, model, n, label_mapping) {
data_pred <- as.data.frame(predict(model, data$input)) %>%
apply(.,1, doBy::which.maxn,3) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")%>%
dplyr::rename(numeric_label_pred = numeric_label,
label_pred = label)
data_true <- data.frame(
numeric_label = apply(data$y,1, which.max) - 1
) %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
data_pred <- dplyr::left_join(data_pred, data_true, by = "id")
return(data_pred)
}
results <- get_pred(model_data$test, m, 3, label_mapping)
View(results)
View(results)
results %>%
dplyr::group_by(id) %>%
dplyr::mutate(correct = numeric_label %in% numeric_label_pred) %>%
dplyr::pull(correct)
results %>%
dplyr::group_by(id) %>%
dplyr::mutate(correct = numeric_label %in% numeric_label_pred) %>%
dplyr::pull(correct) %>%
{sum(.) / length(.)}
results <- get_pred(model_data$test, m, 1, label_mapping)
results %>%
dplyr::group_by(id) %>%
dplyr::mutate(correct = numeric_label %in% numeric_label_pred) %>%
dplyr::pull(correct) %>%
{sum(.) / length(.)}
View(results)
## model evaluation ------------------------------------------------------------
get_pred <- function(data, model, n, label_mapping) {
data_pred <- as.data.frame(predict(model, data$input)) %>%
apply(.,1, doBy::which.maxn,n) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")%>%
dplyr::rename(numeric_label_pred = numeric_label,
label_pred = label)
data_true <- data.frame(
numeric_label = apply(data$y,1, which.max) - 1
) %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
data_pred <- dplyr::left_join(data_pred, data_true, by = "id")
return(data_pred)
}
results <- get_pred(model_data$test, m, 1, label_mapping)
View(results)
hist(results$numeric_label)
summary(results$numeric_label)
## model evaluation ------------------------------------------------------------
get_pred <- function(data, model, n, label_mapping) {
data_pred <- as.data.frame(predict(model, data$input)) %>%
apply(., 1, doBy::which.maxn, n) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")%>%
dplyr::rename(numeric_label_pred = numeric_label,
label_pred = label)
data_true <- data.frame(
numeric_label = apply(data$y,1, which.max) - 1
) %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
#data_pred <- dplyr::left_join(data_pred, data_true, by = "id")
return(data_pred)
}
results <- get_pred(model_data$test, m, 1, label_mapping)
View(results)
View(results)
## model evaluation ------------------------------------------------------------
get_pred <- function(data, model, n, label_mapping) {
data_pred <- as.data.frame(predict(model, data$input)) %>%
apply(., 1, doBy::which.maxn, n) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n())
if(n > 1) {
data_pred <- data_pred %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1)
} else {
data_pred <- data_pred %>%
dplyr::rename(numeric_label = V1) %>%
dplyr::mutate(numeric_label = numeric_label - 1)
}
data_pred <- data_pred %>%
dplyr::left_join(., label_mapping, by = "numeric_label")%>%
dplyr::rename(numeric_label_pred = numeric_label,
label_pred = label)
data_true <- data.frame(
numeric_label = apply(data$y,1, which.max) - 1
) %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
data_pred <- dplyr::left_join(data_pred, data_true, by = "id")
return(data_pred)
}
results <- get_pred(model_data$test, m, 1, label_mapping)
View(results)
results <- get_pred(model_data$test, m, 2, label_mapping)
View(results)
data_pred <- as.data.frame(predict(model, data$input)) %>%
apply(., 1, doBy::which.maxn, n) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n())
data_pred <- as.data.frame(predict(m, model_data$input)) %>%
apply(., 1, doBy::which.maxn, n) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n())
data_pred <- as.data.frame(predict(m, model_data$test$input)) %>%
apply(., 1, doBy::which.maxn, n) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n())
data_pred <- as.data.frame(predict(m, model_data$test$input)) %>%
apply(., 1, doBy::which.maxn, 1) %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n())
View(data_pred)
data_pred <- as.data.frame(predict(m, model_data$test$input)) %>%
apply(., 1, doBy::which.maxn, 1) %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n())
View(data_pred)
data_pred <- as.data.frame(predict(m, model_data$test$input)) %>%
apply(., 1, doBy::which.maxn, 1)
data_pred <- as.data.frame(predict(m, model_data$test$input)) %>%
apply(., 1, doBy::which.maxn, 1) %>%
{data.frame(numeric_label = .)}
View(data_pred)
rm(data_pred)
## model evaluation ------------------------------------------------------------
get_pred <- function(data, model, n, label_mapping) {
data_pred <- as.data.frame(predict(model, data$input)) %>%
apply(., 1, doBy::which.maxn, n)
if(n > 1) {
data_pred <- data_pred %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1)
} else {
data_pred <- data_pred %>%
{data.frame(numeric_label = .)} %>%
dplyr::mutate(id = 1:dplyr::n(),
numeric_label = numeric_label - 1)
}
data_pred <- data_pred %>%
dplyr::left_join(., label_mapping, by = "numeric_label")%>%
dplyr::rename(numeric_label_pred = numeric_label,
label_pred = label)
data_true <- data.frame(
numeric_label = apply(data$y,1, which.max) - 1
) %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
data_pred <- dplyr::left_join(data_pred, data_true, by = "id")
return(data_pred)
}
results <- get_pred(model_data$test, m, 1, label_mapping)
View(results)
results %>%
dplyr::group_by(id) %>%
dplyr::mutate(correct = numeric_label %in% numeric_label_pred) %>%
dplyr::pull(correct) %>%
{sum(.) / length(.)}
results <- get_pred(model_data$test, m, 2, label_mapping)
results %>%
dplyr::group_by(id) %>%
dplyr::mutate(correct = numeric_label %in% numeric_label_pred) %>%
dplyr::pull(correct) %>%
{sum(.) / length(.)}
results <- get_pred(model_data$test, m, 3, label_mapping)
results %>%
dplyr::group_by(id) %>%
dplyr::mutate(correct = numeric_label %in% numeric_label_pred) %>%
dplyr::pull(correct) %>%
{sum(.) / length(.)}
new_sentences <- data.frame(text = c("Wir fordern eine strikte Einwanderungspolitik.",
"Der Ausbau erneuerbarer Energien ist essentiell in der BekÃ¤mpfung des Klimawandels",
"Ausbau des Sozialstaates ist negativ behaftet.",
"Auftrag der Mission Resolute Support bleibt es, die nationalen Verteidigungs und  SicherheitskrÃ¤fte  zu  befÃ¤higen,  ihrer  Sicherheitsverantwortung  nachzukommen.",
"Strom aus erneuerbaren Energien leistet einen wesentlichen Beitrag zu Erreichung der  Klimaziele  Deutschlands  und  der  EuropÃ¤ischen  Union.",
"Es ist eine Kernaufgabe staatlichen Handelns, Rahmenbedingungen fÃ¼r gesunde, sichere und menschengerecht gestaltete Arbeitsbedingungen der BeschÃ¤ftigten zu schaffen.",
"Die Erreichung der globalen Nachhaltigkeitsziele und der Pariser Klimaschutz-ziele darf auch im weltweiten Kampf gegen die Folgen der COVID-19-Pandemie nicht  in  den  Hintergrund  der  internationalen  Zusammenarbeit  rÃ¼cken,  sondern  muss   weiterhin zentral fÃ¼r das Handeln der internationalen Staatengemeinschaft bleiben.",
"Die Realisierung von Nord Stream 2 trÃ¤gt zu sinkenden Gaspreisen bei, da auf Grund der im Vergleich zur Route Ã¼ber Festland kÃ¼rzeren Transportroute durch die Ostsee Transportkosten sowie TransitgebÃ¼hren eingespart werden.",
"Die kÃ¼rzere Transportroute und der Umstand, dass es sich um eine  moderne Pipeline handelt, verringern zugleich die allgemeine Umweltbelastung und das Risiko eines Schadensfalles durch Abnutzung oder veralteter Technik samt hieraus entstehender Umweltbelastungen."))
new_sentences <- clean_text(new_sentences,"text")
View(new_sentences)
new_sentences <- new_sentences$text
sequences_new <- keras::texts_to_sequences(model_data$tokenizer, new_sentences)
input_new <- keras::pad_sequences(sequences_new, maxlen = model_data$max_length)
results_new <- as.data.frame(predict(m, input_new))
View(results_new)
## model evaluation ------------------------------------------------------------
get_pred <- function(model_data, model, n, label_mapping, new_data = NULL) {
if(!is.null(new_data)) {
input <- clean_text(new_data,"text") %>%
dplyr::pull(text) %>%
keras::texts_to_sequences(model_data$tokenizer, .) %>%
keras::pad_sequences(., maxlen = model_data$max_length)
data_pred <- as.data.frame(predict(model, input)) %>%
apply(., 1, doBy::which.maxn, n)
} else {
data_pred <- as.data.frame(predict(model, model_data$test$input)) %>%
apply(., 1, doBy::which.maxn, n)
}
if(n > 1) {
data_pred <- data_pred %>%
t() %>%
as.data.frame() %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
tidyr::pivot_longer(!id, names_to = "rank", values_to = "numeric_label")%>%
dplyr::mutate(rank = as.numeric(gsub("V","",rank)),
numeric_label = numeric_label - 1)
} else {
data_pred <- data_pred %>%
{data.frame(numeric_label = .)} %>%
dplyr::mutate(id = 1:dplyr::n(),
numeric_label = numeric_label - 1)
}
data_pred <- data_pred %>%
dplyr::left_join(., label_mapping, by = "numeric_label")%>%
dplyr::rename(numeric_label_pred = numeric_label,
label_pred = label)
if(is.null(new_data)) {
data_true <- data.frame(
numeric_label = apply(model_data$test$y,1, which.max) - 1
) %>%
dplyr::mutate(id = 1:dplyr::n()) %>%
dplyr::left_join(., label_mapping, by = "numeric_label")
data_pred <- dplyr::left_join(data_pred, data_true, by = "id")
}
return(data_pred)
}
results <- get_pred(model_data, m, 3, label_mapping)
results %>%
dplyr::group_by(id) %>%
dplyr::mutate(correct = numeric_label %in% numeric_label_pred) %>%
dplyr::pull(correct) %>%
{sum(.) / length(.)}
new_sentences <- data.frame(text = c("Wir fordern eine strikte Einwanderungspolitik.",
"Der Ausbau erneuerbarer Energien ist essentiell in der BekÃ¤mpfung des Klimawandels",
"Ausbau des Sozialstaates ist negativ behaftet.",
"Auftrag der Mission Resolute Support bleibt es, die nationalen Verteidigungs und  SicherheitskrÃ¤fte  zu  befÃ¤higen,  ihrer  Sicherheitsverantwortung  nachzukommen.",
"Strom aus erneuerbaren Energien leistet einen wesentlichen Beitrag zu Erreichung der  Klimaziele  Deutschlands  und  der  EuropÃ¤ischen  Union.",
"Es ist eine Kernaufgabe staatlichen Handelns, Rahmenbedingungen fÃ¼r gesunde, sichere und menschengerecht gestaltete Arbeitsbedingungen der BeschÃ¤ftigten zu schaffen.",
"Die Erreichung der globalen Nachhaltigkeitsziele und der Pariser Klimaschutz-ziele darf auch im weltweiten Kampf gegen die Folgen der COVID-19-Pandemie nicht  in  den  Hintergrund  der  internationalen  Zusammenarbeit  rÃ¼cken,  sondern  muss   weiterhin zentral fÃ¼r das Handeln der internationalen Staatengemeinschaft bleiben.",
"Die Realisierung von Nord Stream 2 trÃ¤gt zu sinkenden Gaspreisen bei, da auf Grund der im Vergleich zur Route Ã¼ber Festland kÃ¼rzeren Transportroute durch die Ostsee Transportkosten sowie TransitgebÃ¼hren eingespart werden.",
"Die kÃ¼rzere Transportroute und der Umstand, dass es sich um eine  moderne Pipeline handelt, verringern zugleich die allgemeine Umweltbelastung und das Risiko eines Schadensfalles durch Abnutzung oder veralteter Technik samt hieraus entstehender Umweltbelastungen."))
n <- get_pred(model_data, m, 3, label_mapping, new_sentences)
View(n)
View(n)
get_pred(model_data, m, 3, label_mapping, new_sentences) %>%
dplyr::pull(label_pred)
get_pred(model_data, m, 1, label_mapping, new_sentences) %>%
dplyr::pull(label_pred)
keras::save_model_tf(m, "saved_model/poli_model")
